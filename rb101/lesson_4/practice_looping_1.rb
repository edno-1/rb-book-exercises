# # runaway loop
# loop do
#   puts 'Just keep priniting...'
#   break
# end
# # this loop emphasizes loop control, particularly breaking out of an infinite loop


# # loopception
# loop do
#   puts 'This is the outer loop.'

#   loop do
#     puts 'This is the inner loop.'
#     break
#   end
#   break
# end

# puts 'This is outside all loops.'
# # this exercise tests our understanding of nested loops and nested loop control
# # how the program will move between nested loops, inner and outer


# # control the loop
# iterations = 1

# loop do
#   puts "Number of iterations = #{iterations}"
#   break if iterations == 5
#   iterations += 1
# end
# # controlling the number times a loop executes by use of an iterator and an if modifier


# # loop on command
# loop do
#   puts 'Should I stop looping?'
#   answer = gets.chomp
#   break if answer == 'yes'
#   puts "Incorrect answer. Please answer 'yes'"
# end
# # controlling the execution of a loop through user input, retrieving and handling user input
# # adding error message when the user input does not adhere to expected value


# # say hello
# say_hello = true

# while say_hello
#   5.times { puts 'Hello!' }
#   say_hello = false
# end

# # althought the Integer.times method makes it easier, a more fundamental way of solving the problem is:
# say_hello = true
# counter = 0

# while say_hello
#   puts 'Hello!'
#   counter += 1
#   say_hello = false if counter == 5
# end

# # the goal of this exercise is modify the code so "Hello!" is printed 5 times.
# # we can use Integer#times
# # we can reassign the boolean say_hello into an integer iterator and chance the while condition
# # we can reassign say_hello to true after the 5th iteration...

# # this exercise introduces us to the 'while' loop, which differs from the 'loop' loop.
# # the 'while' block is not a block in the same way the 'loop' block is.
# # variable scope of the 'while' block is the same as the main scope while the 'loop'
# # block's scope is not accessible outside of the block but the outer scope is accessible
# # from within the 'loop' scope.


# # # print while
# # numbers = []

# # while numbers.length <5
# #   random = (0..99).to_a.sample
# #   numbers << random
# # end

# # puts numbers

# # we can also solve this problem using the `Kernel#rand` method

# numbers = []

# while numbers.length < 5
#   random = rand(100)
#   numbers << random
#   puts random
# end

# # here we initialize an empty array numbers and presumably pass generated numbers into it
# # it is an example of how we can use data structures and looping together in solving problems
# # (0..99) is a Range object not an Array object, so we cannot use Array#sample on (0..99)
# # we can use the numbers Array object to hold the random numbers generated by appending them to the array
# # we use the length of the array as the iterator while preserving the generated numbers.

# # there is a difference between invoking the `puts` method within or outside the loop
# I would guess that within the loop, it is invoked 5 times while outside the loop it is invoked only once


# # count up
# # here we are using an until loop, which is different from the while, and loop loop
# count = 0

# until count == 10
#   count += 1
#   puts count
# end
# # changing the order of the iteration and the output method `puts` can significantly
# # change what is outputed on the screen. until does not iterate after the condition
# # is satisfied.
# # the danger of using count == 10 is that if count is initialized above 10, we will
# # end up with an infinite loop. Might be more robust to uses count > 10 as the
# # condition and adjust the rest of the loop accordingly.\
# # until and while loops are the opposite. until loops until the condition is true.
# # while loops until the condition is false.


# # print until
# # this exercise allows us to practice using the `until` loop
# # iterating over an array of elements
# # my approach:
# # initialize the variable numbers and assign it to the given array object
# # initialize a variable current_position to `Integer` `0`
# # initialize? a until loop with the condition `current_position' >= `numbers.size'
# # within the `until` loop
# # print the element located at the `current_position` in `Array` `numbers`
# # iterate `current_position` by +1
# # end the until loop statement

# #code with intent
# numbers = [7, 9, 13, 25, 18]

# current_position = 0

# until current_position >= numbers.size
#   puts numbers[current_position] # `Array.[]` does not pull directly from the location of the element in the array...
#   current_position += 1
# end

# # the `current_position` allows us to control the number of iterations.
# # we also use it to select the next value in the array.



# # that's odd
# # this exercise introduces us to the `for` loop.
# # the `for` loop syntax includes a counter and a range
# # the counter iterates through each element of the range in order
# # we need to modify the following code so that the counter `i` is only output
# # if `i` is an odd number
# # my approach:
# # add a conditional statement that evaluates whether `i` is an odd or even number
# #  - the question becomes: how do we determine if `i` is odd or even?
# #  my approach:
# #    What do we know about the difference between even and odd numbers?
# #    - even numbers divided by 2 will have a remainder of 0
# #    - odd numbers divided by 2 will have a remainder of 1
# #    - We can divide the counter `i` by 2 and check if the remainder is 1 (aka `i` is odd)
# #    - We can also use the `Integer#odd?` method, which returns `true` if the caller is odd
# # add an if statement that modifies the `puts` methods so it only `puts` if
# # `i` is an odd number


# for i in 1..100
#   puts i if (i % 2) == 1
# end


# # greet your friends
# # further use of the for loop, iterate over an array of string elements
# # can I pass the array as the range for the `for` loop?
# # let's check the documentation - yes, quote: "the value to iterate over"
# # so we will pass in the array `friends` as "the value to iterate over"
# # `for` loop is similar to using each but does not create a new variable scope
# # within the `for` loop we will out the following string "Hello, ..." and interpolate
# # the name of the friends in the `friends` array.
# # the `for` loop should automatically resolve once all elements within the value
# # have been iterated over

# # code with intent
# # initialize the variable `friends` and assign it to the given array
# # initialize? a for loop with iterator `current_name` and pass the array `friends` as
# # the value to be iterated over
# # within the `for` loop,
# # puts the statement "Hello, #{current_name}!", which should interpolate the current_name
# # end the `for` loop statement

# friends = ['Sarah', 'John', 'Hannah', 'Dave']

# for current_name in friends
#   puts "Hello, #{current_name}!"
# end

# # maybe be better practice to use `friend` as the variable instead of `current_name`



